),
# Boxes
fluidRow(
box(status = "primary",
sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
selectInput("progress", "Progress",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80,
"100%" = 100)
)
),
box(title = "Histogram box title",
status = "warning", solidHeader = TRUE, collapsible = TRUE,
plotOutput("plot", height = 250)
)
),
# Boxes with solid color, using `background`
fluidRow(
# Box with textOutput
box(
title = "Status summary",
background = "green",
width = 4,
textOutput("status")
),
# Box with HTML output, when finer control over appearance is needed
box(
title = "Status summary 2",
width = 4,
background = "red",
uiOutput("status2")
),
box(
width = 4,
background = "light-blue",
p("This is content. The background color is set to light-blue")
)
)
)
server <- function(input, output) {
output$orderNum <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$orderNum2 <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$progress <- renderUI({
tagList(input$progress, tags$sup(style="font-size: 20px", "%"))
})
output$progress2 <- renderUI({
paste0(input$progress, "%")
})
output$status <- renderText({
paste0("There are ", input$orders,
" orders, and so the current progress is ", input$progress, "%.")
})
output$status2 <- renderUI({
iconName <- switch(input$progress,
"100" = "ok",
"0" = "remove",
"road"
)
p("Current status is: ", icon(iconName, lib = "glyphicon"))
})
output$plot <- renderPlot({
hist(rnorm(input$orders))
})
}
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body
),
server = server
)
}
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?DT
install.packages("DT
")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?read.csv
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
install.packages("DT")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?get
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?withProgress
runApp('ShinyMeta')
?showNotification
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?paste
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?showNotification
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
library(metafor)
?metafor
?escalc
dat <- get(data(dat.bcg)
)
View(dat)
?dat.bcg
dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat, replace=FALSE)
dat
metafor::forest.rma(dat)
?rma
dat.rma <- rma(yi = yi, vi = vi, data = dat)
forest.rma(dat.rma)
-0.89+.325
-0.89+(.325 + 1.96)
-0.89-(.325 + 1.96)
-0.89-(.325 * 1.96)
-0.89+(.325 * 1.96)
-0.89+(.325 * 1.69)
-0.89-(.325 * 1.69)
?escalc
7776^5
shiny::runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
dat.bcg
str(dat.bcg)
View(dat.bcg)
?else
?if
runApp('ShinyMeta')
runApp('ShinyMeta')
?reactove
?reactive
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
reactiveValues()
?reactiveValues
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?uniroot
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?renderUI
runApp('ShinyMeta')
runApp('ShinyMeta')
?selectInput
?rma
dta
dta <- reactive({
input$refresh
isolate({
if (dataC() == "1") {
# load example data set and select relevant rows and columns
data <- metafor::dat.bcg
data <- subset(data, alloc == "random")
data$N <- rowSums(data[, c(4, 5, 6, 7)])
data <- as.data.frame(data)
} else if (dataC() == "2") {
read.csv(
input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote
)
} else if (dataC() == "3") {
simulate_data(
n = input$n_studies,
m = input$sample_size_mean,
sd = input$sample_size_sd,
or = input$odds_ratio
)
} else {
get(metafor::dat.bcg)
}
})
})
dta
get(metafor::dat.bcg)
get(dat.bcg)
bcg<- dat.bcg
bcg
names(bcg)
runApp('ShinyMeta')
list(names(dta))
as.list(names(dta))
runApp('ShinyMeta')
runApp('ShinyMeta')
data(package='metafor')$results[,3]),
data(package='metafor')$results[,3])
package='metafor')$results[,3]
s.list(data(package='metafor')$results[,3])
as.list(data(package='metafor')$results[,3])
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
str(dta)
runApp('ShinyMeta')
print(str(bcg))
print(str(bcg))
runApp('ShinyMeta')
names(bdg)
names(bcg)
runApp('ShinyMeta')
runApp('ShinyMeta')
bcg$
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
row.names(bcg)
col.names(bcg)
names(bcg)
paste0(names(bcg))
print(names(bcg))
list(names(bcg))
as.list(names(bcg))
runApp('ShinyMeta')
runApp('ShinyMeta')
?isolate
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?observeEvent
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
dta.names <-eventReactive({
input$refresh
as.list(names(dta()))
})
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
values <- reactiveValues(A=1)
values
values()
values(1)
fun <- reactive({ as.character(values$A) })
fun
fun()
isolate(fun())
runApp('ShinyMeta')
errorhandling
is.Null(errorhandling)
is.null(errorhandling)
exists
exits(errorhandling)
exis#ts(errorhandling)
exists(errorhandling)
exists("errorhandling")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?renderPlot
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
bcg
?cbin
cbind
runApp('ShinyMeta')
?cbind
?data.frame
cbind(x1 = bcg$trial)
cbind(x1 = bcg$trial, x2 = bcg$author)
write.csv("bcg_test.csv", bcg)
write.csv(bcg, "bcg_test.csv" )
getwd()
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
exists(input$file1$datapath)
exists("input$file1$datapath")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?reactive
?reactive
library(shiny)
library(metafor)
library(DT)
library(shiny)
library(metafor)
library(shinydashboard)
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
dta.original
dta.original <- reactive({dat.bcg})
str(bcg)
str(dat.bcg)
dta.original()$year
dta.original($year)
dta.original(year)
dta.original()
dta.original <- reactive(dat.bcg)
dta.original()$year
dta.original()
dta.original <- reactive(dat.bcg
dta.original <- dat.bcg
data <-  cbind(tpos = dta.original[input$v.ai],
tneg = dta.original[input$v.bi],
cpos = dta.original[input$v.ci],
cneg = dta.original[input$v.di],
author = dta.origina[input$v.author],
year = dta.original[input$v.year])
input <- as.list(v.ai = tpos)
input <- as.list(v.ai = "tpos")
input <- as.list(v.ai == "tpos")
input <- as.list(NULL)
input$v.ai <- "tpos"
input
input$v.bi <- "tneg"
input
dta.original[input$v.ai]
dta.original['input$v.ai']
dta.original[input$v.ai]
dta.original[input$v.bi]
cbind(dta.original[input$v.ai], dta.original[input$v.bi])
str(cbind(dta.original[input$v.ai], dta.original[input$v.bi]))
input$v.author <- "author"
str(cbind(dta.original[input$v.ai], dta.original[input$v.bi], dta.original[input$v.author])))
str(cbind(dta.original[input$v.ai], dta.original[input$v.bi], dta.original[input$v.author]))
cbind(dta.original[input$v.ai], dta.original[input$v.bi], dta.original[input$v.author])
exists("input$v.ai")
exists(input$v.ai)
input
exists('input$v.ai')
exists(input$v.ai)
exists(input)
exists("input")
exists("input$v.ai")
exists("dta.original")
exists("dta.original()")
dta.original <- reactive({dat.bcg})
exists("dta.original()")
exists("dta.original")
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('C:/Users/jannis/Desktop/shinytest/test')
runApp('C:/Users/jannis/Desktop/shinytest/test')
runApp('C:/Users/jannis/Desktop/shinytest/test')
dta.original <- dat.bcg
dta.original[[tpos]]
dta.original[['tpos']]
dta.original['tpos']
dta.original[['tpos']]
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?rowsum
?rowSums
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
name(dta.original)
names(dta.original)
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
?selectInput
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
runApp('ShinyMeta')
